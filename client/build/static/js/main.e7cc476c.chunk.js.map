{"version":3,"sources":["_actions/errorActions.js","_actions/types.js","_actions/authActions.js","components/auth/LoginModal.js","components/auth/RegisterModal.js","components/auth/Logout.js","components/auth/ForgotPasswordModal.js","components/auth/ResendEmailVerificationLink.js","components/auth/index.js","_actions/userAction.js","components/userProfile/UpdateProfileModal.js","components/userProfile/UpdatePasswordModal.js","components/userProfile/DeleteAccount.js","components/userProfile/index.js","components/home/Home.js","components/auth/ResetPassword.js","App.js","serviceWorker.js","_reducers/errorReducer.js","_reducers/authReducer.js","_reducers/userReducer.js","_reducers/index.js","index.js","utils/apiEndpoints.js","logo.svg"],"names":["returnErrors","success","message","error","id","type","payload","loadUser","dispatch","getState","a","axios","get","apiEndpoints","USER_ENDPOINT","tokenConfig","response","data","user","token","auth","config","headers","LoginModal","useSelector","state","useDispatch","useState","show","setShow","email","setEmail","password","setPassword","errorMessage","setErrorMessage","useEffect","isAuthenticated","handleClose","handleSubmit","e","preventDefault","body","JSON","stringify","post","AUTH_LOGIN","logIn","Button","variant","onClick","Modal","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Alert","Form","onSubmit","Group","Label","Control","placeholder","value","name","onChange","target","handleEmail","required","handlePassword","block","RegisterModal","setName","username","setUsername","alert","AUTH_SIGNUP","signUp","handleName","htmlFor","srOnly","InputGroup","Prepend","Text","FormControl","handleUsername","Logout","ForgotPasswordModal","AUTH_RECOVER","forgotPassword","ResendEmailVerificationLink","AUTH_VERIFY_EMAIL_RESEND","resendEmailVerificationLink","Auth","authComponents","Fragment","guestComponents","className","isLoading","Spinner","animation","role","localStorage","getItem","UpdateProfileModal","userProfile","setUser","put","USER_UPDATE","updateProfile","UpdatePasswordModal","currentPassword","setCurrentPassword","newPassword","setNewPassword","USER_UPDATE_PASSWORD","updatePassword","handleCurrentPassword","handleNewPassword","DeleteAccountModal","Footer","delete","USER_DELETE","UserProfile","DeleteAccount","Home","src","logo","alt","href","rel","ResetPassword","props","location","pathname","App","exact","path","component","Boolean","window","hostname","match","initialState","allReducers","combineReducers","action","setItem","removeItem","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.e7cc476c.chunk.js","sourcesContent":["import { GET_ERRORS, CLEAR_ERRORS } from './types';\n\n// return errors\nexport const returnErrors = (success, message, error = null, id = null) => {\n    return {\n        type: GET_ERRORS,\n        payload: {\n            success,\n            message,\n            error,\n            id,\n        },\n    };\n};\n\n// clear errors\nexport const clearErrors = () => {\n    return {\n        type: CLEAR_ERRORS,\n    };\n};\n","// Authentication\nexport const USER_LOADING = 'USER_LOADING';\nexport const USER_LOADED = 'USER_LOADED';\nexport const AUTH_ERROR = 'AUTH_ERROR';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\nexport const FORGOT_PASSWORD_FAIL = 'FORGOT_PASSWORD_FAIL';\nexport const FORGOT_PASSWORD_SUCCESS = 'FORGOT_PASSWORD_SUCCESS';\nexport const RESEND_EMAIL_VERIFICATION_LINK_FAIL =\n    'RESEND_EMAIL_VERIFICATION_LINK_FAIL';\nexport const RESEND_EMAIL_VERIFICATION_LINK_SUCCESS =\n    'RESEND_EMAIL_VERIFICATION_LINK_SUCCESS';\n\n// errors\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\n\n// data refresh\nexport const AUTH_DATA_REFRESH = 'AUTH_DATA_REFRESH';\nexport const USER_PROFILE_DATA_REFRESH = 'USER_PROFILE_DATA_REFRESH';\n\n// User\nexport const UPDATE_PROFILE_FAIL = 'UPDATE_PROFILE_FAIL';\nexport const UPDATE_PROFILE_SUCCESS = 'UPDATE_PROFILE_SUCCESS';\nexport const UPDATE_PASSWORD_FAIL = 'UPDATE_PASSWORD_FAIL';\nexport const UPDATE_PASSWORD_SUCCESS = 'UPDATE_PASSWORD_SUCCESS';\nexport const DELETE_ACCOUNT_FAIL = 'DELETE_ACCOUNT_FAIL';\nexport const DELETE_ACCOUNT_SUCCESS = 'DELETE_ACCOUNT_SUCCESS';\n","import axios from 'axios';\n\nimport { returnErrors } from './errorActions';\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    FORGOT_PASSWORD_FAIL,\n    FORGOT_PASSWORD_SUCCESS,\n    RESEND_EMAIL_VERIFICATION_LINK_FAIL,\n    RESEND_EMAIL_VERIFICATION_LINK_SUCCESS,\n    AUTH_DATA_REFRESH,\n} from './types';\nimport apiEndpoints from '../utils/apiEndpoints';\n\n// Check token & Load user\nexport const loadUser = () => async (dispatch, getState) => {\n    // User loading\n    dispatch({\n        type: USER_LOADING,\n    });\n\n    try {\n        const response = await axios.get(\n            apiEndpoints.USER_ENDPOINT,\n            tokenConfig(getState)\n        );\n\n        dispatch({\n            type: USER_LOADED,\n            payload: response.data.data.user,\n        });\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message,\n                error.response.data.error\n            )\n        );\n        dispatch({\n            type: AUTH_ERROR,\n        });\n    }\n};\n\n// Signup New Account\nexport const signUp = ({ name, email, username, password }) => async (\n    dispatch\n) => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    // Request body\n    const body = JSON.stringify({ name, email, username, password });\n\n    try {\n        const response = await axios.post(\n            apiEndpoints.AUTH_SIGNUP,\n            body,\n            config\n        );\n\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: response.data,\n        });\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message ||\n                    error.response.data.error.name ||\n                    error.response.data.error.email ||\n                    error.response.data.error.username ||\n                    error.response.data.error.password ||\n                    'Something went wrong',\n                error.response.data.error,\n                REGISTER_FAIL\n            )\n        );\n        dispatch({\n            type: REGISTER_FAIL,\n        });\n    }\n};\n\n// Signup Login\nexport const logIn = ({ email, password }) => async (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    // Request body\n    const body = JSON.stringify({ email, password });\n\n    try {\n        const response = await axios.post(\n            apiEndpoints.AUTH_LOGIN,\n            body,\n            config\n        );\n\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: response.data,\n        });\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message ||\n                    error.response.data.error.email ||\n                    error.response.data.error.password ||\n                    'Something went wrong',\n                error.response.data.error,\n                LOGIN_FAIL\n            )\n        );\n        dispatch({\n            type: LOGIN_FAIL,\n        });\n    }\n};\n\n// logout\nexport const logOut = () => {\n    return {\n        type: LOGOUT_SUCCESS,\n    };\n};\n\n// forgot password\nexport const forgotPassword = ({ email }) => async (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    // Request body\n    const body = JSON.stringify({ email });\n\n    try {\n        const response = await axios.post(\n            apiEndpoints.AUTH_RECOVER,\n            body,\n            config\n        );\n        dispatch({\n            type: FORGOT_PASSWORD_SUCCESS,\n            payload: response.data,\n        });\n\n        dispatch({\n            type: AUTH_DATA_REFRESH,\n        });\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message ||\n                    error.response.data.error.email ||\n                    'Something went wrong',\n                error.response.data.error,\n                FORGOT_PASSWORD_FAIL\n            )\n        );\n    }\n};\n\n// forgot password\nexport const resendEmailVerificationLink = ({ email }) => async (dispatch) => {\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    // Request body\n    const body = JSON.stringify({ email });\n\n    try {\n        const response = await axios.post(\n            apiEndpoints.AUTH_VERIFY_EMAIL_RESEND,\n            body,\n            config\n        );\n        dispatch({\n            type: RESEND_EMAIL_VERIFICATION_LINK_SUCCESS,\n            payload: response.data,\n        });\n        dispatch({\n            type: AUTH_DATA_REFRESH,\n        });\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message ||\n                    error.response.data.error.email ||\n                    'Something went wrong',\n                error.response.data.error,\n                RESEND_EMAIL_VERIFICATION_LINK_FAIL\n            )\n        );\n    }\n};\n\n// Setup config/headers & token\nexport const tokenConfig = (getState) => {\n    // Get token from local storage\n    const token = getState().auth.token;\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    // if token then add to header\n    if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return config;\n};\n","import { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport React, { useState, useEffect } from 'react';\nimport { logIn } from '../../_actions/authActions';\nimport { LOGIN_FAIL } from '../../_actions/types';\nimport { clearErrors } from '../../_actions/errorActions';\n\nconst LoginModal = () => {\n    const auth = useSelector((state) => state.auth);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    // data\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    // message\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        if (error.id === LOGIN_FAIL) {\n            setErrorMessage(error.message);\n        } else {\n            setErrorMessage('');\n        }\n\n        if (show && auth.isAuthenticated) {\n            handleClose();\n        }\n    }, [error, auth, show]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n        setEmail('');\n        setPassword('');\n    };\n\n    const handleShow = () => setShow(true);\n\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    };\n\n    const handlePassword = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // create new user\n        const userDetails = { email, password };\n\n        // Attempt to register\n        dispatch(logIn(userDetails));\n    };\n\n    return (\n        <div>\n            <Button variant=\"primary\" onClick={handleShow}>\n                Login\n            </Button>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Login</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    {errorMessage ? (\n                        <Alert variant=\"danger\">{errorMessage}</Alert>\n                    ) : null}\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"example@email.com\"\n                                value={email}\n                                name=\"email\"\n                                onChange={(e) => handleEmail(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                value={password}\n                                name=\"password\"\n                                onChange={(e) => handlePassword(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\" variant=\"dark\" block>\n                            Sign In\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default LoginModal;\n","import {\n    Modal,\n    Button,\n    Form,\n    InputGroup,\n    FormControl,\n    Alert,\n} from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport React, { useState, useEffect } from 'react';\nimport { signUp } from '../../_actions/authActions';\nimport { REGISTER_FAIL, REGISTER_SUCCESS } from '../../_actions/types';\nimport { clearErrors } from '../../_actions/errorActions';\n\nconst RegisterModal = () => {\n    const auth = useSelector((state) => state.auth);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    // data\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n\n    // message\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        if (error.id === REGISTER_FAIL) {\n            setErrorMessage(error.message);\n        } else {\n            setErrorMessage('');\n        }\n\n        if (show && auth.id === REGISTER_SUCCESS) {\n            alert(auth.message);\n            handleClose();\n        }\n    }, [error, auth, show]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n        setName('');\n        setEmail('');\n        setUsername('');\n        setPassword('');\n    };\n\n    const handleShow = () => setShow(true);\n\n    const handleName = (e) => {\n        setName(e.target.value);\n    };\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    };\n    const handleUsername = (e) => {\n        setUsername(e.target.value);\n    };\n    const handlePassword = (e) => {\n        setPassword(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // create new user\n        const newUser = { name, email, username, password };\n\n        // Attempt to register\n        dispatch(signUp(newUser));\n    };\n\n    return (\n        <div>\n            <Button variant=\"primary\" onClick={handleShow}>\n                Create new account\n            </Button>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Register</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    {errorMessage ? (\n                        <Alert variant=\"danger\">{errorMessage}</Alert>\n                    ) : null}\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                placeholder=\"Smruti Ranjan Rana\"\n                                value={name}\n                                name=\"name\"\n                                onChange={(e) => handleName(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"example@email.com\"\n                                value={email}\n                                name=\"email\"\n                                onChange={(e) => handleEmail(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Username</Form.Label>\n                            <Form.Label htmlFor=\"username\" srOnly>\n                                Username\n                            </Form.Label>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text>@</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <FormControl\n                                    id=\"username\"\n                                    placeholder=\"Username\"\n                                    value={username}\n                                    name=\"username\"\n                                    onChange={(e) => handleUsername(e)}\n                                    required\n                                />\n                            </InputGroup>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Password\"\n                                value={password}\n                                name=\"password\"\n                                onChange={(e) => handlePassword(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\" variant=\"dark\" block>\n                            Sign Up\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default RegisterModal;\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useDispatch } from 'react-redux';\nimport { logOut } from '../../_actions/authActions';\n\nconst Logout = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <Button variant=\"primary\" onClick={() => dispatch(logOut())}>\n            Logout\n        </Button>\n    );\n};\n\nexport default Logout;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { clearErrors } from '../../_actions/errorActions';\nimport {\n    FORGOT_PASSWORD_FAIL,\n    FORGOT_PASSWORD_SUCCESS,\n} from '../../_actions/types';\nimport { forgotPassword } from '../../_actions/authActions';\n\nconst ForgotPasswordModal = () => {\n    const auth = useSelector((state) => state.auth);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    // data\n    const [email, setEmail] = useState('');\n\n    // message\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        if (error.id === FORGOT_PASSWORD_FAIL) {\n            setErrorMessage(error.message);\n        } else {\n            setErrorMessage('');\n        }\n\n        if (show && auth.id === FORGOT_PASSWORD_SUCCESS) {\n            alert(auth.message);\n            handleClose();\n        }\n    }, [error, auth, show]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n        setEmail('');\n    };\n\n    const handleShow = () => {\n        setShow(true);\n    };\n\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // user email\n        const userEmail = { email };\n\n        // Attempt to register\n        dispatch(forgotPassword(userEmail));\n    };\n\n    return (\n        <div>\n            <h6 onClick={handleShow}>Forgot Password?</h6>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Forgot Password</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    {errorMessage ? (\n                        <Alert variant=\"danger\">{errorMessage}</Alert>\n                    ) : null}\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"example@email.com\"\n                                value={email}\n                                name=\"email\"\n                                onChange={(e) => handleEmail(e)}\n                                required\n                            />\n                        </Form.Group>\n\n                        <Button type=\"submit\" variant=\"dark\" block>\n                            Send Verification Link\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default ForgotPasswordModal;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { clearErrors } from '../../_actions/errorActions';\nimport {\n    RESEND_EMAIL_VERIFICATION_LINK_FAIL,\n    RESEND_EMAIL_VERIFICATION_LINK_SUCCESS,\n} from '../../_actions/types';\nimport { resendEmailVerificationLink } from '../../_actions/authActions';\n\nconst ResendEmailVerificationLink = () => {\n    const auth = useSelector((state) => state.auth);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    // data\n    const [email, setEmail] = useState('');\n\n    // message\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        if (error.id === RESEND_EMAIL_VERIFICATION_LINK_FAIL) {\n            setErrorMessage(error.message);\n        } else {\n            setErrorMessage('');\n        }\n\n        if (show && auth.id === RESEND_EMAIL_VERIFICATION_LINK_SUCCESS) {\n            alert(auth.message);\n            handleClose();\n        }\n    }, [error, auth, show]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n        setEmail('');\n    };\n\n    const handleShow = () => {\n        setShow(true);\n    };\n\n    const handleEmail = (e) => {\n        setEmail(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // user email\n        const userEmail = { email };\n\n        dispatch(resendEmailVerificationLink(userEmail));\n    };\n\n    return (\n        <div>\n            <h6 onClick={handleShow}>Resend Email Verification Link</h6>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Resend Email Verification Link</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    {errorMessage ? (\n                        <Alert variant=\"danger\">{errorMessage}</Alert>\n                    ) : null}\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Email</Form.Label>\n                            <Form.Control\n                                type=\"email\"\n                                placeholder=\"example@email.com\"\n                                value={email}\n                                name=\"email\"\n                                onChange={(e) => handleEmail(e)}\n                                required\n                            />\n                        </Form.Group>\n\n                        <Button type=\"submit\" variant=\"dark\" block>\n                            Send Verification Link\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default ResendEmailVerificationLink;\n","import React from 'react';\nimport LoginModal from './LoginModal';\nimport RegisterModal from './RegisterModal';\nimport Logout from './Logout';\nimport { useSelector } from 'react-redux';\nimport { Spinner } from 'react-bootstrap';\nimport ForgotPasswordModal from './ForgotPasswordModal';\nimport ResendEmailVerificationLink from './ResendEmailVerificationLink';\n\nconst Auth = () => {\n    const auth = useSelector((state) => state.auth);\n\n    const authComponents = (\n        <React.Fragment>\n            <Logout />\n        </React.Fragment>\n    );\n\n    const guestComponents = (\n        <React.Fragment>\n            <LoginModal />\n            <RegisterModal />\n            <div className=\"mt-4\">\n                <ForgotPasswordModal />\n                <ResendEmailVerificationLink />\n            </div>\n        </React.Fragment>\n    );\n\n    return (\n        <div>\n            {!auth.isLoading ? (\n                auth.isAuthenticated ? (\n                    authComponents\n                ) : (\n                    guestComponents\n                )\n            ) : (\n                <Spinner animation=\"border\" role=\"status\">\n                    <span className=\"sr-only\">Loading...</span>\n                </Spinner>\n            )}\n        </div>\n    );\n};\n\nexport default Auth;\n","import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport {\n    UPDATE_PROFILE_SUCCESS,\n    UPDATE_PROFILE_FAIL,\n    USER_PROFILE_DATA_REFRESH,\n    UPDATE_PASSWORD_SUCCESS,\n    UPDATE_PASSWORD_FAIL,\n    AUTH_DATA_REFRESH,\n    DELETE_ACCOUNT_FAIL,\n    DELETE_ACCOUNT_SUCCESS,\n    LOGOUT_SUCCESS,\n} from './types';\nimport { loadUser } from './authActions';\nimport apiEndpoints from '../utils/apiEndpoints';\n\nexport const updateProfile = ({ name }) => async (dispatch) => {\n    // Request body\n    const body = JSON.stringify({ name });\n\n    try {\n        const response = await axios.put(\n            apiEndpoints.USER_UPDATE,\n            body,\n            tokenConfig()\n        );\n\n        dispatch({\n            type: UPDATE_PROFILE_SUCCESS,\n            payload: response.data,\n        });\n\n        dispatch({\n            type: USER_PROFILE_DATA_REFRESH,\n        });\n\n        dispatch(loadUser());\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message ||\n                    error.response.data.error.name ||\n                    'Something went wrong',\n                error.response.data.error,\n                UPDATE_PROFILE_FAIL\n            )\n        );\n        dispatch({\n            type: UPDATE_PROFILE_FAIL,\n        });\n    }\n};\n\n// update password\nexport const updatePassword = ({ currentPassword, newPassword }) => async (\n    dispatch\n) => {\n    // Request body\n    const body = JSON.stringify({ currentPassword, newPassword });\n\n    try {\n        const response = await axios.put(\n            apiEndpoints.USER_UPDATE_PASSWORD,\n            body,\n            tokenConfig()\n        );\n\n        dispatch({\n            type: UPDATE_PASSWORD_SUCCESS,\n            payload: response.data,\n        });\n\n        dispatch({\n            type: USER_PROFILE_DATA_REFRESH,\n        });\n\n        dispatch(loadUser());\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message ||\n                    error.response.data.error.newPassword ||\n                    'Something went wrong',\n                error.response.data.error,\n                UPDATE_PASSWORD_FAIL\n            )\n        );\n        dispatch({\n            type: UPDATE_PASSWORD_FAIL,\n        });\n    }\n};\n\n// update password\nexport const deleteAccount = () => async (dispatch) => {\n    try {\n        await axios.delete(apiEndpoints.USER_DELETE, tokenConfig());\n\n        dispatch(loadUser());\n    } catch (error) {\n        dispatch(\n            returnErrors(\n                error.response.data.success,\n                error.response.data.message || 'Something went wrong',\n                error.response.data.error,\n                DELETE_ACCOUNT_FAIL\n            )\n        );\n        dispatch({\n            type: DELETE_ACCOUNT_FAIL,\n            success: error.response.data.success,\n            message: error.response.data.message || 'Something went wrong',\n        });\n    }\n};\n\n// Setup config/headers & token\nexport const tokenConfig = () => {\n    // Get token from local storage\n    const token = localStorage.getItem('token');\n\n    // Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n        },\n    };\n\n    // if token then add to header\n    if (token) {\n        config.headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    return config;\n};\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { clearErrors } from '../../_actions/errorActions';\nimport {\n    UPDATE_PROFILE_FAIL,\n    UPDATE_PROFILE_SUCCESS,\n} from '../../_actions/types';\nimport { updateProfile } from '../../_actions/userAction';\n\nconst UpdateProfileModal = () => {\n    const auth = useSelector((state) => state.auth);\n    const userProfile = useSelector((state) => state.userProfile);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    // user from auth\n    const [user, setUser] = useState({});\n\n    // data\n    const [name, setName] = useState('');\n\n    // message\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        setUser(auth.user);\n        setName(user.name);\n\n        if (error.id === UPDATE_PROFILE_FAIL) {\n            setErrorMessage(error.message);\n        } else {\n            setErrorMessage('');\n        }\n\n        if (show && userProfile.id === UPDATE_PROFILE_SUCCESS) {\n            alert(userProfile.message);\n            handleClose();\n        }\n    }, [auth, error, userProfile, show]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n    };\n\n    const handleShow = () => {\n        setShow(true);\n    };\n\n    const handleName = (e) => {\n        setName(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // data\n        const data = { name };\n\n        dispatch(updateProfile(data));\n    };\n\n    return (\n        <div>\n            <Button variant=\"primary\" onClick={handleShow}>\n                Update Profile\n            </Button>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Update Profile</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    {errorMessage ? (\n                        <Alert variant=\"danger\">{errorMessage}</Alert>\n                    ) : null}\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                placeholder=\"Your Name\"\n                                value={name}\n                                name=\"name\"\n                                onChange={(e) => handleName(e)}\n                                required\n                            />\n                        </Form.Group>\n\n                        <Button type=\"submit\" variant=\"dark\" block>\n                            Update\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default UpdateProfileModal;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { clearErrors } from '../../_actions/errorActions';\nimport {\n    UPDATE_PASSWORD_FAIL,\n    UPDATE_PASSWORD_SUCCESS,\n} from '../../_actions/types';\nimport { updatePassword } from '../../_actions/userAction';\n\nconst UpdatePasswordModal = () => {\n    const userProfile = useSelector((state) => state.userProfile);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    // data\n    const [currentPassword, setCurrentPassword] = useState('');\n    const [newPassword, setNewPassword] = useState('');\n\n    // message\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        if (error.id === UPDATE_PASSWORD_FAIL) {\n            setErrorMessage(error.message);\n        } else {\n            setErrorMessage('');\n        }\n\n        if (show && userProfile.id === UPDATE_PASSWORD_SUCCESS) {\n            alert(userProfile.message);\n            handleClose();\n        }\n    }, [error, userProfile, show]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n    };\n\n    const handleShow = () => {\n        setShow(true);\n    };\n\n    const handleCurrentPassword = (e) => {\n        setCurrentPassword(e.target.value);\n    };\n\n    const handleNewPassword = (e) => {\n        setNewPassword(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        // data\n        const data = { currentPassword, newPassword };\n        \n        dispatch(updatePassword(data));\n    };\n\n    return (\n        <div>\n            <Button variant=\"primary\" onClick={handleShow}>\n                Update Password\n            </Button>\n            <Modal\n                show={show}\n                onHide={handleClose}\n                backdrop=\"static\"\n                keyboard={false}\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title>Update Password</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    {errorMessage ? (\n                        <Alert variant=\"danger\">{errorMessage}</Alert>\n                    ) : null}\n                    <Form onSubmit={(e) => handleSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Current Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"Current Password\"\n                                value={currentPassword}\n                                name=\"currentPassword\"\n                                onChange={(e) => handleCurrentPassword(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>New Password</Form.Label>\n                            <Form.Control\n                                type=\"password\"\n                                placeholder=\"New Password\"\n                                value={newPassword}\n                                name=\"newPassword\"\n                                onChange={(e) => handleNewPassword(e)}\n                                required\n                            />\n                        </Form.Group>\n                        <Button type=\"submit\" variant=\"dark\" block>\n                            Update\n                        </Button>\n                    </Form>\n                </Modal.Body>\n            </Modal>\n        </div>\n    );\n};\n\nexport default UpdatePasswordModal;\n","import React, { useState, useEffect } from 'react';\nimport { Modal, Button, Form, Alert } from 'react-bootstrap';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { clearErrors } from '../../_actions/errorActions';\nimport { deleteAccount } from '../../_actions/userAction';\nimport {\n    DELETE_ACCOUNT_FAIL,\n    DELETE_ACCOUNT_SUCCESS,\n} from '../../_actions/types';\n\nconst DeleteAccountModal = () => {\n    const userProfile = useSelector((state) => state.userProfile);\n    const error = useSelector((state) => state.error);\n\n    const dispatch = useDispatch();\n\n    // modal\n    const [show, setShow] = useState(false);\n\n    useEffect(() => {\n        if (error.id === DELETE_ACCOUNT_FAIL) {\n            alert(error.message);\n        }\n    }, [error]);\n\n    // handlers\n    const handleClose = () => {\n        setShow(false);\n        dispatch(clearErrors());\n    };\n\n    const handleShow = () => {\n        setShow(true);\n    };\n\n    const handleDeleteAccount = () => {\n        dispatch(deleteAccount());\n    };\n\n    return (\n        <div>\n            <Button variant=\"danger\" onClick={handleShow}>\n                Delete Account\n            </Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Body>Are you sure to delete your account?</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"danger\" onClick={handleDeleteAccount}>\n                        Delete Account\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n};\n\nexport default DeleteAccountModal;\n","import React, { useState, useEffect } from 'react';\nimport UpdateProfileModal from './UpdateProfileModal';\nimport UpdatePasswordModal from './UpdatePasswordModal';\nimport { useSelector } from 'react-redux';\nimport DeleteAccountModal from './DeleteAccount';\n\nconst UserProfile = () => {\n    const auth = useSelector((state) => state.auth);\n\n    const [user, setUser] = useState({});\n\n    useEffect(() => {\n        setUser(auth.user);\n    }, [auth]);\n\n    const authComponents = (\n        <React.Fragment>\n            <h2>{user ? `Welcome ${user.name}` : ''}</h2>\n            <UpdateProfileModal />\n            <UpdatePasswordModal />\n            <DeleteAccountModal />\n        </React.Fragment>\n    );\n\n    const guestComponents = null;\n\n    return (\n        <div>\n            {!auth.isLoading\n                ? auth.isAuthenticated\n                    ? authComponents\n                    : guestComponents\n                : null}\n        </div>\n    );\n};\n\nexport default UserProfile;\n","import React from 'react';\nimport UserProfile from '../userProfile';\nimport Auth from '../auth';\nimport logo from '../../logo.svg';\n\nconst Home = () => {\n    return (\n        <div>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n            <UserProfile />\n            <Auth />\n\n            <a\n                className=\"App-link mt-4\"\n                href=\"/api/docs\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                API Docs\n            </a>\n        </div>\n    );\n};\n\nexport default Home;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { withRouter } from 'react-router-dom';\n\nconst ResetPassword = (props) => {\n    const [isValidToken, setIsValidToken] = useState('');\n\n    const inital = async () => {\n        const response = await axios.get('/');\n    };\n\n    useEffect(() => {\n        // console.log(props.history.token);\n    }, []);\n\n    const invalidTokenComponent = () => {\n        return <div></div>;\n    };\n\n    const validTokenComponent = () => {\n        return <div></div>;\n    };\n\n    return <div>{props.location.pathname}</div>;\n};\n\nexport default ResetPassword;\n","import React, { useEffect } from 'react';\n\nimport './App.css';\nimport { loadUser } from './_actions/authActions';\nimport { useDispatch } from 'react-redux';\nimport Auth from './components/auth';\nimport UserProfile from './components/userProfile';\nimport Home from './components/home/Home';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport ResetPassword from './components/auth/ResetPassword';\n\nconst App = () => {\n    const dispatch = useDispatch();\n\n    const handleDispatch = () => {\n        dispatch(loadUser());\n    };\n\n    useEffect(() => {\n        handleDispatch();\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <Router>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}></Route>\n                    <Route\n                        path=\"/api/auth/reset/:token\"\n                        component={ResetPassword}\n                    ></Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { GET_ERRORS, CLEAR_ERRORS } from '../_actions/types';\n\nconst initialState = {\n    success: false,\n    message: null,\n    error: null,\n    id: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_ERRORS:\n            return {\n                success: action.payload.success,\n                message: action.payload.message,\n                error: action.payload.error,\n                id: action.payload.id,\n            };\n        case CLEAR_ERRORS:\n            return initialState;\n        default:\n            return state;\n    }\n};\n","import {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    FORGOT_PASSWORD_SUCCESS,\n    RESEND_EMAIL_VERIFICATION_LINK_SUCCESS,\n    AUTH_DATA_REFRESH,\n} from '../_actions/types';\n\nconst initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: null,\n    isLoading: false,\n    user: null,\n    id: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case USER_LOADING:\n            return {\n                ...state,\n                isLoading: true,\n            };\n\n        case USER_LOADED:\n            return {\n                ...state,\n                isAuthenticated: true,\n                isLoading: false,\n                user: action.payload,\n            };\n\n        case LOGIN_SUCCESS:\n            localStorage.setItem('token', action.payload.data.token);\n            return {\n                ...state,\n                ...action.payload.data,\n                isAuthenticated: true,\n                isLoading: false,\n                id: LOGIN_SUCCESS,\n            };\n\n        case REGISTER_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: false,\n                isLoading: false,\n                id: REGISTER_SUCCESS,\n            };\n\n        case FORGOT_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: false,\n                isLoading: false,\n                id: FORGOT_PASSWORD_SUCCESS,\n            };\n\n        case RESEND_EMAIL_VERIFICATION_LINK_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n                isAuthenticated: false,\n                isLoading: false,\n                id: RESEND_EMAIL_VERIFICATION_LINK_SUCCESS,\n            };\n\n        case AUTH_ERROR:\n        case LOGIN_FAIL:\n        case LOGOUT_SUCCESS:\n        case REGISTER_FAIL:\n            localStorage.removeItem('token');\n            return {\n                ...state,\n                token: null,\n                user: null,\n                isAuthenticated: false,\n                isLoading: false,\n                id: null,\n            };\n\n        case AUTH_DATA_REFRESH:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import {\n    UPDATE_PROFILE_FAIL,\n    UPDATE_PROFILE_SUCCESS,\n    USER_PROFILE_DATA_REFRESH,\n    UPDATE_PASSWORD_FAIL,\n    UPDATE_PASSWORD_SUCCESS,\n    DELETE_ACCOUNT_FAIL,\n    DELETE_ACCOUNT_SUCCESS,\n} from '../_actions/types';\n\nconst initialState = {\n    success: false,\n    message: '',\n    id: null,\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case UPDATE_PROFILE_SUCCESS:\n            return {\n                ...state,\n                success: action.payload.success,\n                message: action.payload.message,\n                id: UPDATE_PROFILE_SUCCESS,\n            };\n\n        case UPDATE_PASSWORD_SUCCESS:\n            return {\n                ...state,\n                success: action.payload.success,\n                message: action.payload.message,\n                id: UPDATE_PASSWORD_SUCCESS,\n            };\n\n        case DELETE_ACCOUNT_FAIL:\n            return {\n                ...state,\n                success: action.payload.success,\n                message: action.payload.message,\n                id: DELETE_ACCOUNT_FAIL,\n            };\n\n        case DELETE_ACCOUNT_SUCCESS:\n            return {\n                ...state,\n                ...action.payload,\n                id: DELETE_ACCOUNT_SUCCESS\n            }\n\n        case UPDATE_PROFILE_FAIL:\n        case UPDATE_PASSWORD_FAIL:\n        case USER_PROFILE_DATA_REFRESH:\n            return initialState;\n\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport errorReducer from './errorReducer';\nimport authReducer from './authReducer';\nimport userReducer from './userReducer';\n\nconst allReducers = combineReducers({\n    error: errorReducer,\n    auth: authReducer,\n    userProfile: userReducer,\n});\n\nexport default allReducers;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport allReducers from './_reducers';\nimport thunk from 'redux-thunk';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    allReducers,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    AUTH_SIGNUP: '/api/auth/signup',\n    AUTH_LOGIN: '/api/auth/login',\n    AUTH_RECOVER: '/api/auth/recover',\n    AUTH_VERIFY_EMAIL_RESEND: '/api/auth/resend',\n\n    // user\n    USER_ENDPOINT: '/api/user',\n    USER_UPDATE: '/api/user/update',\n    USER_UPDATE_PASSWORD: '/api/user/updatePassword',\n    USER_DELETE: '/api/user/deleteAccount',\n};\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}